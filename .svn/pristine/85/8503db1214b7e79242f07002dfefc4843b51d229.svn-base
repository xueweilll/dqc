package com.benqzl.controller.production;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.benqzl.controller.BasicController;
import com.benqzl.pojo.production.Defect;
import com.benqzl.service.production.DefectService;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
@Controller
@RequestMapping("defect")
public class DefectController extends BasicController {
	@Autowired
	private DefectService service;
	
	public DefectController() {
		super(DefectController.class);
	}
	
	@RequestMapping(value="bind",method=RequestMethod.POST)
	@ResponseBody
	public String bind(int page,int rows,String unit,String fenlei){
		Map<String, Object> map = new HashMap<String, Object>();
		page = (page == 0 ? 1 : page);
		rows = (rows == 0 ? 15 : rows);
		int start = (page - 1) * rows;
		logger.info("this page rows is " + page + "|" + rows);
		map.put("p1", start);
		map.put("p2", rows);
		map.put("unit", unit);
		List<Defect> defects = new ArrayList<>();
		try {
			defects=service.findByPage(map);
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		gson = new GsonBuilder().registerTypeAdapter(Defect.class, new JsonSerializer<Defect>() {
			@Override
			public JsonElement serialize(Defect arg0, Type arg1,
					JsonSerializationContext arg2) {
				JsonObject json = new JsonObject();
				json.addProperty("id", arg0.getId());
				if(arg0.getTitle().length()>15){
					json.addProperty("title", arg0.getTitle().substring(0, 15)+"...");
				}else{
					json.addProperty("title", arg0.getTitle());
				}
				json.addProperty("zrbm", arg0.getZrbm());
				json.addProperty("starttime", dateFormat.format(arg0.getStarttime()));
				return json;
			}
		}).create();
		String jsonStr = gson.toJson(defects);
		return jsonStr;
	}
	@RequestMapping(value="defectInfo",method=RequestMethod.POST)
	@ResponseBody
	public String coutentInfo(String id,final HttpServletRequest request){
		
		Defect defect = new Defect();
		try {
			defect = service.selectByPrimaryKey(Integer.parseInt(id));
		} catch (Exception e) {
			e.printStackTrace();
		}
		gson = new GsonBuilder().registerTypeAdapter(Defect.class, new JsonSerializer<Defect>() {
			@Override
			public JsonElement serialize(Defect arg0, Type arg1,
					JsonSerializationContext arg2) {
				JsonObject json = new JsonObject();
				json.addProperty("title", arg0.getTitle());
				json.addProperty("zrbm", arg0.getZrbm());
				json.addProperty("bh", arg0.getBh());
				json.addProperty("state", arg0.getState());
				json.addProperty("fenlei", arg0.getFenlei());
				json.addProperty("unit", arg0.getUnit());
				json.addProperty("memo", arg0.getMemo());
				json.addProperty("starttime", dateFormat.format(arg0.getStarttime()));
				json.addProperty("endtime", dateFormat.format(arg0.getEndtime()));
				return json;
			}
		}).create();
		return gson.toJson(defect);
	}

}
